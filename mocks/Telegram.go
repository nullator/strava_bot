// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Telegram is an autogenerated mock type for the Telegram type
type Telegram struct {
	mock.Mock
}

// GetFile provides a mock function with given fields: filename, fileid
func (_m *Telegram) GetFile(filename string, fileid string) error {
	ret := _m.Called(filename, fileid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filename, fileid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStatus provides a mock function with given fields: id
func (_m *Telegram) GetStatus(id int64) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveStatus provides a mock function with given fields: id, status
func (_m *Telegram) SaveStatus(id int64, status string) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTelegram creates a new instance of Telegram. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegram(t interface {
	mock.TestingT
	Cleanup(func())
}) *Telegram {
	mock := &Telegram{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
