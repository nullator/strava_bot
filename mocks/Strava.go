// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	models "strava_bot/internals/models"

	mock "github.com/stretchr/testify/mock"
)

// Strava is an autogenerated mock type for the Strava type
type Strava struct {
	mock.Mock
}

// Auth provides a mock function with given fields: input
func (_m *Strava) Auth(input *models.AuthHandler) (int, *models.StravaUser, error) {
	ret := _m.Called(input)

	var r0 int
	var r1 *models.StravaUser
	var r2 error
	if rf, ok := ret.Get(0).(func(*models.AuthHandler) (int, *models.StravaUser, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*models.AuthHandler) int); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.AuthHandler) *models.StravaUser); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.StravaUser)
		}
	}

	if rf, ok := ret.Get(2).(func(*models.AuthHandler) error); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RefreshToken provides a mock function with given fields: id
func (_m *Strava) RefreshToken(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadActivity provides a mock function with given fields: file, id
func (_m *Strava) UploadActivity(file string, id int64) error {
	ret := _m.Called(file, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(file, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getNewToken provides a mock function with given fields: id
func (_m *Strava) getNewToken(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStrava creates a new instance of Strava. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrava(t interface {
	mock.TestingT
	Cleanup(func())
}) *Strava {
	mock := &Strava{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
