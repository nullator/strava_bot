// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// CustomSlogHandlerInterface is an autogenerated mock type for the CustomSlogHandlerInterface type
type CustomSlogHandlerInterface struct {
	mock.Mock
}

// Enabled provides a mock function with given fields: ctx, level
func (_m *CustomSlogHandlerInterface) Enabled(ctx context.Context, level slog.Level) bool {
	ret := _m.Called(ctx, level)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, slog.Level) bool); ok {
		r0 = rf(ctx, level)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Handle provides a mock function with given fields: ctx, r
func (_m *CustomSlogHandlerInterface) Handle(ctx context.Context, r slog.Record) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slog.Record) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handler provides a mock function with given fields:
func (_m *CustomSlogHandlerInterface) Handler() slog.Handler {
	ret := _m.Called()

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func() slog.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// WithAttrs provides a mock function with given fields: attrs
func (_m *CustomSlogHandlerInterface) WithAttrs(attrs []slog.Attr) slog.Handler {
	ret := _m.Called(attrs)

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func([]slog.Attr) slog.Handler); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// WithGroup provides a mock function with given fields: name
func (_m *CustomSlogHandlerInterface) WithGroup(name string) slog.Handler {
	ret := _m.Called(name)

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func(string) slog.Handler); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// NewCustomSlogHandlerInterface creates a new instance of CustomSlogHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomSlogHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomSlogHandlerInterface {
	mock := &CustomSlogHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
